<?php
/**
 * RegistCalendarBehavior.php
 *
 * @author   Ryuji AMANO <ryuji@ryus.co.jp>
 * @link http://www.netcommons.org NetCommons Project
 * @license http://www.netcommons.org/license.txt NetCommons License
 */

class RegistCalendarBehavior extends ReservationAppBehavior {

	public function updateCalendar(Model $model, $created, $options = array()) {
		//return parent::afterSave($model, $created, $options); // TODO: Change the autogenerated stub

		$data = $model->data;
		//カレンダー連携ここから ADD
		$cmd = 'del';
		//if ($data[$model->alias]['is_date_set']) {
			$cmd =($data[$model->alias]['use_calendar']) ? 'save' : 'del';
		//}
		if ($cmd==='save') {
			//実施期間設定あり&&カレンダー登録する
			$model->loadModels([
				'CalendarActionPlan' => 'Calendars.CalendarActionPlan',
			]);
			//登録・変更用settings指定付きでbehaviorロード
			$model->CalendarActionPlan->Behaviors->load('Calendars.CalendarLink', array(
				'linkPlugin' => Current::read('Plugin.key'),
				//'table' => $model->alias,	//fieldsの対象テーブル
				'table' => 'reservation_events',	//fieldsの対象テーブル
				'inputFields' => array(
					'title' => 'title',
					'description' => 'description',
				),
				'sysFields' => array(
					'key' => 'key',	//tasksの場合、task_contentsテーブルのkey
					'calendar_key' => 'calendar_key',	//tasksの場合、task_contentsテーブルのcalendar_key
				),
				'startendFields' => array(
					'start_datetime' => 'start_datetime', // TODO フォーマット違うか?
					'end_datetime' => 'start_datetime',
				),
				'isServerTime' => true,
				'useStartendComplete' => false,
				'isLessthanOfEnd' => false,

				'isRepeat' => false, //TODO リピートあったら変更
				'rruleTable' => 'reservation_rrules',
				'isPlanRoomId' => true,
				'planRoomTable' => 'reservation_events'
			));
			debug($data);
			$calendarKey = $model->CalendarActionPlan->savePlanForLink($data);
			if (is_string($calendarKey) && ! empty($calendarKey)) {
				//カレンダ登録成功
				//calenar_keyを TaskContentにsave(update)しておく。
				$data[$model->alias]['calendar_key'] = $calendarKey;

				$savedData = $model->save($data, false);

				if ($savedData === false) {
					throw new InternalErrorException(__d('net_commons', 'Internal Server Error'));
				}

				$data[$model->alias] = $savedData[$model->alias];
			} elseif ($calendarKey === '') {
				//未承認や一時保存はカレンダー登録条件を満たさないのでスルー（通常）
			} else { //false
				//カレンダー登録時にエラー発生（エラー）
				//例外なげる
				throw new InternalErrorException(__d('net_commons', 'Internal Server Error'));
			}
			$model->CalendarActionPlan->Behaviors->unload('Calendars.CalendarLink');
		} else {	//cmd===del
			if (! empty($data[$model->alias]['calendar_key'])) {
				//calendar_keyが記録されているので、消しにいく。
				$model->loadModels([
					'CalendarDeleteActionPlan' => 'Calendars.CalendarDeleteActionPlan',
				]);
				//削除用settings指定
				$model->CalendarDeleteActionPlan->Behaviors->load('Calendars.CalendarLink', array(
					'linkPlugin' => Current::read('Plugin.key'),
					'table' => $model->alias,	//fieldsの対象テーブル
					'sysFields' => array(
						'key' => 'key',	//tasksの場合、task_contentsテーブルのkey
						'calendar_key' => 'calendar_key',	//tasksの場合、task_contentsテーブルのcalendar_key
					),
					'isDelRepeat' => false,	//tasksはfalse固定
				));
				$delCalendarKey = $model->CalendarDeleteActionPlan->deletePlanForLink($data);
//					if ($data[$model->alias]['calendar_key'] == $delCalendarKey) {
				//削除が成功したので、calenar_keyをクリアし、use_calendarをＯＦＦにして、
				//TaskContentにsave(update)しておく。
				$data[$model->alias]['calendar_key'] = '';
				$data[$model->alias]['use_calendar'] = 0;
				$savedData = $model->save($data, false);
				if ($savedData === false) {
					throw new InternalErrorException(__d('net_commons', 'Internal Server Error'));
				}
				$data[$model->alias] = $savedData[$model->alias];
//					}
				$model->CalendarDeleteActionPlan->Behaviors->unload('Calendars.CalendarLink');
			} else {
				//calendar_keyが記録されていないので、なにもしない
			}
		}
		//カレンダー連携ここまで ADD
	}
}